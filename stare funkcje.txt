#funkcja do szukanie z maską i tolerancją (niepotrzebna)
def szukajztolerancja(oknostart, okno, szukany):
    box1 = szukany.getbbox()
    img = ImageGrab.grab(bbox=oknostart + okno)
    szer = okno[0] - oknostart[0]
    wys = okno[1] - oknostart[1]
    sum = box1[2] * box1[3]
    for a in range(0, szer):
        for b in range(0, wys):
            cordinate2 = a, b
            cordinate1 = 0, 0
            pix1 = img.getpixel(cordinate2)
            pix2 = szukany.getpixel(cordinate1)
            tolerancja = 1

            if fabs(pix1[0] - pix2[0]) <= tolerancja and fabs(pix1[1] - pix2[1]) <= tolerancja and fabs(
                    pix1[2] - pix2[2]) <= tolerancja:
                # print(fabs(pix1[0] - pix2[0]), fabs(pix1[1] - pix2[1]), fabs(pix1[2] - pix2[2]))
                # print(a,b)
                h = 1
                a = 0
                if ((szer - a > box1[2]) and (wys - b > box1[3])):

                    for j in range(0, box1[2]):
                        if (a == 1):
                            break
                        for i in range(0, box1[3]):
                            if (h == sum):
                                return 1
                            else:
                                cordinate1 = j, i
                                cordinate3 = j + cordinate2[0], i + cordinate2[1]
                                if (szukany.getpixel(cordinate1) == pustybit):
                                    h = h + 1
                                    continue
                                else:
                                    pix1 = img.getpixel(cordinate3)
                                    pix2 = szukany.getpixel(cordinate1)
                                    tolerancja = 1
                                    if fabs(pix1[0] - pix2[0]) <= tolerancja and fabs(
                                            pix1[1] - pix2[1]) <= tolerancja and fabs(pix1[2] - pix2[2]) <= tolerancja:
                                        h = h + 1
                                        print(h, "/", sum)
                                        if (h == sum):
                                            return 1
                                    else:
                                        h = 0
                                        a = 1
                                        break
    return 0

#zwykle szukanie starsza wersja(bez tolerancji , bez pixela maski)
def szukajwoknie2(oknostart, okno, szukany):
    PIL.ImageGrab.grab(bbox=None)
    img = ImageGrab.grab()
    box1 = szukany.getbbox()
    h = 0  # ilosc zgodnych bitow
    for a in range(oknostart[0], okno[0]):
        for b in range(oknostart[1], okno[1]):
            koordy2 = a, b
            koordy1 = 0, 0
            if (img.getpixel(koordy2)) == (szukany.getpixel(koordy1)):
                # pierwszy pixel sie zgadza
                for j in range(0, box1[2]):
                    for i in range(0, box1[3]):
                        koordy1 = j, i
                        koordy3 = j + koordy2[0], i + koordy2[1]
                        if img.getpixel(koordy3) == szukany.getpixel(koordy1):
                            h = h + 1
                            if (h == (box1[2]) * (box1[3])):
                                pozycja = koordy3
                                return pozycja
                        else:
                            h = 0
                            break
    return 0

#Do szukanie z formatu cv2
def szukajwoknie2(oknostart, okno, szukany):
    img = pyautogui.screenshot()
    img = cv2.cvtColor(numpy.array(img), cv2.COLOR_RGB2BGR)
    szukanyWys , szukanySzer, channel = szukany.shape
    wys,szer,channel2=img.shape
    sum = szukanyWys*szukanySzer
    for a in range(0, wys):
        for b in range(0, szer):
            cordinate2 = a, b
            cordinate1 = 0, 0
            if (img[cordinate2].tolist()) == (szukany[cordinate1].tolist()):
                h = 1
                a = 0
                for j in range(0, szukanyWys):
                    if (a == 1):
                        break
                    for i in range(0, szukanySzer):
                        if (h == sum):
                            pozycja = cordinate3[1] + oknostart[1],cordinate3[0] + oknostart[0]
                            return pozycja
                        else:
                            cordinate1 = j, i
                            cordinate3 = j + cordinate2[0], i + cordinate2[1]
                            if (szukany[cordinate1].tolist() == pustybit):
                                h = h + 1
                                continue
                            else:
                                if img[cordinate3].tolist() == szukany[cordinate1].tolist():
                                    h = h + 1
                                    if (h == sum):
                                        pozycja =  cordinate3[1] + oknostart[1],cordinate3[0] + oknostart[0]
                                        return pozycja
                                else:
                                    h = 0
                                    a = 1
                                    break
    return 0
	
#Wczytaj zdjęcia by operować nimi w cv2(funkcje activeseartch,find_numbers etc)
def load_images_tocv2(folder):
    images = {}
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        if img is not None:
            print(filename)
            images[filename] = img
    return images
	
#wykorzystywanie biblioteki do "inteligentnego" szukanie cz1
def active_search(sample, image):
    # pobiera wycinek ze screena i porownuje do duzej probki z folderu
    method = cv2.TM_SQDIFF_NORMED
    small_image = sample
    large_image = image
    # zastosowanie metody by poznac"granice"
    result = cv2.matchTemplate(small_image, large_image, method)
    mn, _, mnLoc, _ = cv2.minMaxLoc(result)
    # Draw the rectangle:
    # koordynaty najlepszego znaleziska
    MPx, MPy = mnLoc
    # Step 2: Get the size of the template. This is the same size as the match.
    trows, tcols = small_image.shape[:2]
    # Przyciecie obrazka do najbardziej dopasowanego
    large_image = large_image[MPy:MPy + trows, MPx:MPx + tcols]
    # tylko jezeli blad jest maly(wykryto czerwone okienko)
    if (mn < 0.25):
        # zwraca tylko czerwone okno
        return large_image
    else:
        # zwraca 0 co ponowi próbe
        return 0
		

#wykorzystywanie biblioteki do "inteligentnego" szukanie cz2	
def which_number(sample, image):
    # pobiera czerwone okno z liczba i porownuje do malej probki z folderu
    method = cv2.TM_SQDIFF_NORMED
    small_image = sample
    large_image = image
    # zastosowanie metody by poznac"granice"
    result = cv2.matchTemplate(small_image, large_image, method)
    mn, _, mnLoc, _ = cv2.minMaxLoc(result)
    # zwroc 1 jezeli maly blad(znaleziono)
    # zwroc 0 jezeli ma szukac dalej
    # tylko jezeli blad jest maly
    if (mn < 0.05):
        print("mn = ", mn)
        return 0
    else:
        return mn
		
		
#obsluga "inteligentego" szukania
def szukajliczb(k, oknoMale1, oknoMale2):
    img = ImageGrab.grab(bbox=oknoMale1 + oknoMale2)
    image = numpy.array(img)
    # Convert RGB to BGR
    image = image[:, :, ::-1].copy()
    probability = []
    szukane = active_search(czerwoneokno, image)
    if isinstance(szukane, int):
        # ilosc  prob przed restartem
        if MULTI == 1:
            if (k > 800):
                return 7
        # ustalenie po ilu powtórzeniach restart
        if (k > 1100):
            return 7
        return 0
    else:
        print("wyskoczylo okno")
        i = 0

        szukaneWys=szukane.shape[0]
        for key in liczby:

            # zabezpieczenie wysokości ( dobra strone warunek? xD)
            if szukaneWys < liczby[key].shape[0]:
                print("pobrano za mala probke by uniknac bledu 'znajduje' 4")
                return 4

            # print("sprawdzam liczbe o indeksie",i)
            probability.append(which_number(liczby[key], szukane))
            if (probability[i] == 0):
                print("znaleziono", key)
                return (i + 1)
            i = i + 1
            # print("szansa",i," = ",probability[i])

        print("nie rozpoznano liczby w oknie, utworzono zrzut wykrycia")
        cv2.imwrite("zrzut.png", szukane)
        # zwraca indeks przykladu ktory byl najpodobniejszy do sprawdzanego
        print("droga eliminacji otrzumano liczbe", probability.index(min(probability)) + 1)
        return probability.index(min(probability)) + 1
	return 0